image: ubuntu:18.04

stages:
  - build
#  - test
#  - deploy

.env: &env
  MAKEJOBS: -j3
  TEST_ZMQ: 0
  BOOST_TEST_RANDOM: 1$CI_CONCURRENT_ID
  CCACHE_SIZE: 100M
  CCACHE_TEMPDIR: /tmp/.ccache-temp
  CCACHE_COMPRESS: 1
  CCACHE_DIR: $HOME/.ccache
  DEP_OPTS: NO_USB=1
  RUN_UNIT_TESTS: "false"
  RUN_FUNCTIONAL_TESTS: "false"
  SDK_URL: https://bitcoincore.org/depends-sources/sdks
  BASE_PACKAGES: build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache python3-zmq
  BUILDDIR: $CI_PROJECT_DIR/$CI_JOB_NAME
  BINDIR: $CI_PROJECT_DIR/$CI_JOB_NAME/bin
  BITCOIN_CONFIG_ALL: --disable-dependency-tracking --prefix=$CI_PROJECT_DIR/depends/$HOST --bindir=$CI_PROJECT_DIR/$CI_JOB_NAME/bin --libdir=$CI_PROJECT_DIR/$CI_JOB_NAME/lib

cache:
  key: $CI_JOB_NAME
  paths:
    - depends/built
    - depends/sdk-sources
    - $HOME/.ccache

.setup-arm-linux: &setup-arm-linux
  variables:
    <<: *env
    HOST: arm-linux-gnueabihf
    PACKAGES: python3 g++-arm-linux-gnueabihf
    GOAL: install
    # -Wno-psabi is to disable ABI warnings: "note: parameter passing for argument of type ... changed in GCC 7.1"
    # This could be removed once the ABI change warning does not show up by default
    BITCOIN_CONFIG: --enable-glibc-back-compat --with-gui=qt5 --enable-reduce-exports CXXFLAGS=-Wno-psabi --disable-bench --disable-tests

.setup-linux: &setup-linux
  variables:
    <<: *env
    HOST: x86_64-unknown-linux-gnu
    GOAL: install
    BITCOIN_CONFIG: --enable-glibc-back-compat --with-gui=qt5 --enable-reduce-exports --disable-bench --disable-tests

.setup-macos: &setup-macos
  variables:
    <<: *env
    HOST: x86_64-apple-darwin14
    OSX_SDK: "10.11"
    PACKAGES: librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools libtinfo5
    GOAL: deploy
    BITCOIN_CONFIG: --enable-gui --enable-reduce-exports --enable-werror --disable-bench --disable-tests

.setup-windows: &setup-windows
  variables:
    <<: *env
    HOST: x86_64-w64-mingw32
    PACKAGES: python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64
    GOAL: deploy
    BITCOIN_CONFIG: --enable-reduce-exports --disable-bench --disable-zmq --disable-tests

.build: &build
  stage: build
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $BASE_PACKAGES
    - echo \> \$HOME/.Azzure
    - mkdir -p depends/SDKs depends/sdk-sources
    - if [ -n $OSX_SDK -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - if [ -n $OSX_SDK -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - if [[ $HOST = *-mingw32 ]]; then update-alternatives --set $HOST-g++ $(which $HOST-g++-posix); fi
    - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS
  script:
    - cd $CI_PROJECT_DIR
    - echo "Depends built sucessfully!"
    - ./autogen.sh
    - mkdir $BUILDDIR
    - cd $BUILDDIR || (echo could not enter $BUILDDIR directory; exit 1)
    - ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
    - make distdir VERSION=$HOST
    - cd Azzure-$HOST || (echo could not enter distdir Azzure-$HOST; exit 1)
    - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
    - make $MAKEJOBS $GOAL || ( echo Build failure. Verbose build follows. && make $GOAL V=1 ; false )
    - cd $CI_PROJECT_DIR || (echo could not enter gitlab build dir $CI_PROJECT_DIR; exit 1)

.collect-artifacts: &collect-artifacts
  when: on_success
  artifacts:
    name: $CI_PROJECT_NAME-$CI_JOB_NAME
    paths:
      - $BINDIR/*
      - $BUILDDIR/Azzure-$HOST/*.dmg
      - $BUILDDIR/Azzure-$HOST/release/*.exe
      - $BUILDDIR/Azzure-$HOST/*.exe

#ARM-Linux:
#  <<: *setup-arm-linux
#  <<: *build
#  <<: *collect-artifacts

#Ubuntu-16.04:
#  image: ubuntu:16.04
#  <<: *setup-linux
#  <<: *build
#  <<: *collect-artifacts

#Ubuntu-18.04:
#  <<: *setup-linux
#  <<: *build
#  <<: *collect-artifacts

#macOS-10.11:
#  <<: *setup-macos
#  <<: *build
#  <<: *collect-artifacts

Windows:
  <<: *setup-windows
  <<: *build
  <<: *collect-artifacts
